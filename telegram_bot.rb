require 'telegram/bot'
require 'logger'
require_relative 'config/environment'

logger = Logger.new(STDOUT)
logger.level = Logger::DEBUG

bot = Telegram::Bot::Client.new(token, logger: logger)

Signal.trap('INT') do
  bot.stop
end

bot.listen do |message|
  begin
    case message
    when Telegram::Bot::Types::Message
      if message.from && !message.from.is_bot
        case message.text
        when '/draw'
          user_ids = Event.where(name: CURRENT_EVENT, status: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω').pluck(:user_id)
          orders = Order.where(user_id: user_ids)
          order_names = orders.pluck(:name)
          bot.api.send_message(chat_id: message.chat.id, text: "–£—á–∞—Å—Ç–Ω–∏–∫–∏: #{order_names.join(', ')}")
        else
          caption = <<~HTML
            <b>üöå –ë–æ—Ä–¥–µ—Ä —Ä–∞–Ω—ã –∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–∏–∑—ã. üáπüá≠ –ü—Ö—É–∫–µ—Ç!</b>

            <b>–ü–æ—á–µ–º—É –º—ã?</b>
            - –û–Ω–ª–∞–π–Ω –∑–∞—è–≤–∫–∞ –∑–∞ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.
            - –î–æ–≤–µ—Ä–∏–µ —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏ –ª–æ–∫–∞–ª–æ–≤.
            - –û–Ω–ª–∞–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä 24/7
            - –û–Ω–ª–∞–π–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤—Å—é –¥–æ—Ä–æ–≥—É.
            - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –æ—Ç—á–µ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            &nbsp;&nbsp;&nbsp;&nbsp;‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
          HTML

          photo_path = Rails.root.join('app', 'assets', 'images', 'bstart.png').to_s
          photo = File.open(photo_path, 'rb')

          chat_id = message.chat.id
          nickname = message.from.username

          kb = [
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: 'üöå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                web_app: { url: "#{ENV['PROD_APP_URL']}?telegram_id=#{chat_id}&nickname=#{nickname}" }
              )
            ]
          ]

          markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)

          sent_message = bot.api.send_photo(
            chat_id: chat_id,
            photo: UploadIO.new(photo, 'image/png', 'bstart.png'),
            caption: caption,
            reply_markup: markup,
            parse_mode: 'HTML'
          )

          message_id_to_delete = sent_message['result']['message_id']
          message_text = message.text || message.caption

          TelegramMessage.create!(telegram_id: chat_id, message_id: message.message_id, text: message_text.to_s)
          TelegramMessage.create!(telegram_id: chat_id, message_id: message_id_to_delete)
          #perform later cherez 2 chasa udalit
        end
      end
    end
  rescue => e
    logger.error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: #{e.message}"
  end
end
